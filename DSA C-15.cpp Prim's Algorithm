#include <iostream>
#include <climits>
using namespace std;

class Graph
{
    int a[5][5]; 
    int n;     
    string officeNames[5];

public:
    Graph()
    {
        for(int i=0;i<5;i++)
        {
            for(int j=0;j<5;j++)
            {
                a[i][j]=100; 
            }
        }
    }

    void readgraph()
    {
        int edges,x,y,cost;
        cout<<"Enter the number of offices (max 5): "<<endl;
        cin>>n;

        cout<<"Enter names for each office:"<<endl;
        for(int i=0;i<n;i++)
        {
            cout<<"Office "<<i<<": ";
            cin>>officeNames[i];
        }

        cout<<"Enter the number of phone lines: "<<endl;
        cin>>edges;

        for(int i=0;i<edges;i++)
        {
            cout<<"Enter edge "<<i+1<<" (Office1 Office2 Cost): "<<endl;
            cin>>x>>y>>cost; 
            a[x][y]=cost;
            a[y][x]=cost;
        }
    }

    void printgraph()
    {
        cout<<"Cost Matrix (100 = No Connection): "<<endl;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                cout<<a[i][j]<<"\t";
            }
            cout<<endl;
        }
    }

    void PrimsAlgo()
    {
        int visited[5]={0};
        int distance[5];
        int from[5];
        int b[5][5]={0};
        int sum=0;

        visited[0]=1;
        distance[0]=0;
        for(int i=1;i<n;i++)
        {
            distance[i]=a[0][i];
            from[i]=0;
        }

        int edges=n-1;
        while(edges>0)
        {
            int min=100,v;
            
            for(int i=1;i<n;i++)
            {
                if(!visited[i]&&distance[i]<min)
                {
                    min=distance[i];
                    v=i;
                }
            }

            b[from[v]][v]=min;
            b[v][from[v]]=min;
            sum+=min;
            visited[v]=1;
            edges--;

            for(int i=1;i<n;i++)
            {
                if(!visited[i]&&a[v][i]<distance[i])
                {
                    distance[i]=a[v][i];
                    from[i]=v;
                }
            }
        }

        cout<<endl;
        cout<<"Minimum cost: "<<sum<<endl;
        cout<<"Optimal connections to lease: "<<endl;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++) 
            {
                if(b[i][j]!=0)
                {
                    cout<<officeNames[i]<<"-"<<officeNames[j]<<": $"<<b[i][j]<<endl;
                }
            }
        }
    }
};

int main()
{
    Graph g;
    g.readgraph();
    g.printgraph();
    g.PrimsAlgo();
    return 0;
}
